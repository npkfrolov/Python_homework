--создаем отдельную таблицу, которая будет считать число лайков (на примере медиа-контента). 
CREATE TABLE likes_media (
media_id INT UNSIGNED NOT NULL PRIMARY KEY, 
summ INT
);

--другая таблица будет фиксировать факт лайка конкретного юзера на конкретном объекте медиа:
CREATE TABLE user_media (
id INT UNSIGNED NOT NULL PRIMARY KEY
media_id INT UNSIGNED,
user_id INT UNSIGNED 
);
--Не знаю пока, как именно реализуется это на фронтенде, но когда юзер "лайкает фоточку", нужно проверить условие, чтобы в таблице user_media не было пары значений media_id:user_id. Тогда запускается триггер на апдейт, который вызывает триггерную функцию change_sum. Триггерная функция предполагает добавление к общей сумме summ еще одной единицы, результирующее поле отдает данные на фронт по числу лайков.
UPDATE likes_media SET media_id = media_id + 1;

--кроме того нужна триггерная функция, которая создает во второй таблице пару media_id:user_id. Но на INSERT я пока триггерные функции не делал. Если добавить сюда триггерную функцию на DELETE, которая будет запускаться триггером в случае, когда лайк поступает от юзера для которого в таблице likes_media пара media_id:user_id уже существует, то можно вместе с удалением из таблицы user_media записи с данным юзером еще и обратно вычитать лайки через 
UPDATE likes_media SET media_id = media_id - 1;


