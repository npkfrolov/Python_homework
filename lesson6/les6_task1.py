# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

import sys
from collections import Counter

def count_mem(*args):
    summ = 0
    for arg in args:
        if hasattr(arg, '__iter__'):
            if hasattr(arg, 'items'):
                for key, value in arg.items():
                    summ += sys.getsizeof(key)
                    summ += sys.getsizeof(value)
            elif not isinstance(arg, str):
                for item in arg:
                    summ += sys.getsizeof(item)
        else: summ += sys.getsizeof(arg)
    return summ

# В диапазоне натуральных чисел от 2 до 99 определить, сколько из них кратны каждому из чисел в диапазоне от 2 до 9.

a = list(range(2, 100))
b = list(range(2, 10))

# решение 1

matrix = [[0]*len(a) for _ in b]

for i in a:
    for j in b:
        spam = 0
        if i % j == 0:
            spam = 1
        matrix[j-2][i-2] = spam

for j in b:
    print(f'чисел, кратных {b[j-2]}, {matrix[j-2].count(1)}')

# решение 2

mydict = Counter([j for i in a for j in b if i % j == 0])
print(f'Частотность кратности чисел от 2 до 99 числам от 2 до 9: {list(mydict.items())}')

# решение 3 (украл у препода)
START_NUM = 2
END_NUM = 99
START_DIV = 2
END_DIV = 9

for m in range(START_DIV, END_DIV + 1):
    frequency = 0
    for k in range(START_NUM, END_NUM + 1):
        if k % m == 0:
            frequency += 1
    print(f'Числу {m} кратно {frequency} чисел')

print(f'решение 1 кушает {count_mem(a, b, matrix, i, j, spam)} байт памяти')
print(f'решение 2 кушает {count_mem(a, b, i, j, mydict)} байт памяти')
print(f'решение 3 кушает {count_mem(START_NUM, END_NUM, START_DIV, END_DIV, m, frequency, k)} байт памяти')
print(count_mem())

#  Python 3.6, разрядность 64
# решение 1 (собственное на 3-м уроке) наиболее прожорливое - за счет создания двухмерного массива (только на него пошло 6784 байт)), осложненного тремя циклами for, ему понадобилось 9836 байт
# решение 2 (собственное после 6 урока) наиболее лаконичное, но потребляет память (3472 байта) за счет создания словаря с двумя вложенными циклами
# решение 3 (украденное у препода) экономит память, видимо, на том, что не создает промежуточные списки (заняло всего 196 байт).
# Если принять самое экономичное решение за единицу, то соотношение по потреблению памяти составляет 50,1 : 17,7 : 1.
# Оптимальным является решение 1, хотя и решение 2 может пригодиться - оно лаконичное, и если задача не встроена в нечто пожирающее память, мне кажется, его можно использовать.
# Общий вывод - препод умнее студента после 3 урока в 9836/196 = 50,1 раз, но интеллект студента между 3 и 6 уроком вырос в 9836/3472 = 2,83 раза, так что не все безнадежно.
